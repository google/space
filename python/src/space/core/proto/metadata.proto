// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package space.proto;

import "google/protobuf/timestamp.proto";
import "substrait/plan.proto";
import "substrait/type.proto";

// Record the current storage metadata path in a static local file.
// A mutation to storage generates a new metadata file. The current metadata
// file path is either persisted in the entry point file, or an external
// catalog (not implemented yet).
// NEXT_ID: 2
message EntryPoint {
  // File path of the current storage metadata file.
  string metadata_file = 1;
}

// Metadata persisting the current status of a storage, including logical
// metadata such as schema, and physical metadata persisted as a history of
// snapshots
// NEXT_ID: 9
message StorageMetadata {
  // Create time of the storage.
  google.protobuf.Timestamp create_time = 1;

  // Last update time of the storage.
  google.protobuf.Timestamp last_update_time = 2;

  // The storage type.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // Dataset type supports fully managed storage features.
    DATASET = 1;
    // Materialized view type supports synchronizing changes from sources.
    MATERIALIZED_VIEW = 2;
  }
  Type type = 3;

  // The storage schema.
  Schema schema = 4;

  // The current snapshot ID for the main branch.
  int64 current_snapshot_id = 5;

  // All alive snapshots with snapshot ID as key.
  map<int64, Snapshot> snapshots = 6;

  // Store the logical plan for materialized views.
  LogicalPlan logical_plan = 7;

  // All alive refs, with reference name as key. Reference name can be a tag 
  // or a branch name.
  map<string, SnapshotReference> refs = 8;
  
}

// The storage logical schema where user provided types are persisted instead
// of their physical storage format.
// NEXT_ID: 4
message Schema {
  // Fields persisted as Substrait named struct.
  substrait.NamedStruct fields = 1;

  // Primary key field names. Required but primary keys are un-enforced.
  repeated string primary_keys = 2;

  // Names of record fields that are stored in row formats (ArrayRecord).
  repeated string record_fields = 3;
}

// Storage snapshot persisting physical metadata such as manifest file paths.
// It is used for obtaining all alive data file paths for a given snapshot.
// NEXT_ID: 6
message Snapshot {
  // The snapshot ID.
  int64 snapshot_id = 1;

  // The create time of the snapshot.
  google.protobuf.Timestamp create_time = 2;

  // All data in this snapshot.
  oneof data_info {
    // Manifest file information embedded in Snapshot. Preferred option when
    // the number of manifest files are small.
    ManifestFiles manifest_files = 3;
  }

  // Statistics of all data in the storage.
  StorageStatistics storage_statistics = 4;

  // File path of the change log of the snapshot.
  string change_log_file = 5;
}

// Reference to a snapshot.
// NEXT_ID: 4
message SnapshotReference {
  // Name for the reference.
  string reference_name = 1;

  // The snapshot ID.
  int64 snapshot_id = 2;

  enum ReferenceType{
    TYPE_UNSPECIFIED = 0;
    // Reference of a specific snapshot within the storage history.
    TAG = 1;
    // Reference of the current snapshot of a branch.
    BRANCH = 2;
  }
  ReferenceType type = 3;
}

// Stores information of manifest files.
// NEXT_ID: 3
message ManifestFiles {
  // Manifest for index files.
  repeated string index_manifest_files = 1;

  // Manifest for record files.
  repeated string record_manifest_files = 2;
}

// Statistics of storage data.
// NEXT_ID: 5
message StorageStatistics {
  // Number of rows.
  int64 num_rows = 1;

  // Compressed bytes of index data.
  int64 index_compressed_bytes = 2;

  // Uncompressed bytes of index data.
  int64 index_uncompressed_bytes = 3;

  // Uncompressed bytes of record data.
  int64 record_uncompressed_bytes = 4;
}


// Change log stores changes made by a snapshot.
// NEXT_ID: 3
message ChangeLog {
  // Rows deleted in this snapshot.
  repeated RowBitmap deleted_rows = 1;

  // New rows added in this snapshot.
  repeated RowBitmap added_rows = 2;
}


// Mark rows in a file by bitmap.
// NEXT_ID: 4
message RowBitmap {
  // File path that the bit map applies to.
  string file = 1;

  // All rows are selected. Bitmap is empty in this case.
  bool all_rows = 2;

  oneof bitmap {
    // Roaring bitmap.
    bytes roaring_bitmap = 3;
  }
}

// Store the logical plan of a transform.
// NEXT_ID: 3
message LogicalPlan {
  // Stores the logical plan.
  substrait.Plan logical_plan = 1;

  // Registry of user defined functions.
  // Key is UDF name; value is pickle file path.
  map<string, string> udfs = 2;
}
